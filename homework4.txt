'number' + 3 + 3 ;
Результат: 'number33';

// 1. JavaScript зчитує вираз зліва направо. 

// 2. 'number' + 3:
//    - JavaScript спочатку спробує об'єднати рядок 'number' з числом 3.
//    - Оскільки один з операндів є рядком ('number'), JavaScript конвертує обидва операнди у рядки і здійснює конкатенацію.

// 3. Результат першої операції: 'number3' 

// 4. Потім додаємо до результату третє число:
//    - Рядок 'number3' конкатенується з числом 3.
//    - Знову JavaScript конвертує число 3 у рядок і здійснює конкатенацію.


// Таким чином, вираз 'number' + 3 + 3 перетворюється в рядок 'number33'.




null + 3;
Результат: 3;


// 1. Конвертування null в число:
//    - За стандартом JavaScript, null перетворюється в число 0.

// 2. Після конвертування, вираз стає: 0 + 3

// 3. Додаємо число 0 до числа 3.

// Таким чином, вираз null + 3 перетворюється в число 3.




5 && "qwerty";
Результат: "qwerty";


// 1. Оцінка першого операнду (5):
//    - 5 є істинним значенням у JavaScript. 

// 2. Оцінка другого операнду ("qwerty"):
//    - Правий операнд виразу &&. JavaScript поверне його значення, якщо обидва операнди істинні.
//    - "qwerty" є рядком і також є істинним значенням.

// 3. Остаточний результат: "qwerty"

// Таким чином, вираз 5 && "qwerty" поверне рядок "qwerty", оскільки обидва операнди виразу && є істинними значеннями, і JavaScript поверне значення правого операнду.




+'40' + +'2' + "hillel";
Результат: "42hillel";


// 1. JavaScript спочатку виконає унарне перетворення "+" для числових рядків '40' і '2'.

// 2. Унарне перетворення для '40':
//    - JavaScript перетворює рядок '40' у число.
//    - Результат першого унарного перетворення: 40 

// 3. Унарне перетворення для '2':
//    - JavaScript перетворює рядок '2' у число.
//    - Результат другого унарного перетворення: 2 

// 4. Після усіх унарних перетворень, вираз стає: 40 + 2 + "hillel"

// 5. Далі JavaScript здійснює операцію додавання:
//    - Спочатку додає числа 40 і 2.
//    - Результат додавання чисел: 42 

// 6. Потім JavaScript конкатенує результат з рядком "hillel":
//    - Оскільки один з операндів є рядком, JavaScript конвертує число 42 у рядок і здійснює конкатенацію.

// 7. Остаточний результат: "42hillel" 

// Таким чином, вираз +'40' + +'2' + "hillel" перетворюється в рядок "42hillel".




'10' - 5 === 6;
Результат: false;


// 1. JavaScript спочатку виконає операцію віднімання між рядком '10' і числом 5.

// 2. Конвертування рядка '10' у число:
//    - Рядок '10' автоматично конвертується в число 10 для виконання арифметичних операцій.

// 3. Після конвертування вираз стає: 10 - 5 === 6

// 4. JavaScript здійснює операцію віднімання:
//    - Результат віднімання: 5

// 5. Порівняння результату віднімання з числом 6:
//    - JavaScript порівнює результат віднімання (5) з числом 6.


// Таким чином, вираз '10' - 5 === 6 перетворюється в логічне вираження false.




true + false;
Результат: 1;


// 1. JavaScript спочатку спробує конвертувати логічні значення true і false у числа.
//    - true конвертується в число 1.
//    - false конвертується в число 0.

// 2. JavaScript здійснює операцію додавання:
//    - Додає числа 1 і 0.
//    - Результат додавання: 1

// Таким чином, вираз true + false перетворюється в число 1.




'4px' - 3;
Результат: NaN;


// 1. Конвертування рядка '4px' у число:
//    - Рядок '4px' не може бути конвертований у число, бо містить не лише цифри, а також символи.

// 2. JavaScript автоматично повертає NaN:
//    - Оскільки не можна виконати операцію між рядком і числом, результатом є NaN.

// Таким чином, вираз '4px' - 3 перетворюється в NaN, оскільки JavaScript не може конвертувати рядок '4px' у число для виконання операції віднімання.




'4' - 3;
Результат: 1;


// 1. Конвертування рядка '4' у число:
//    - JavaScript успішно конвертує рядок '4' у число 4 для виконання арифметичних операцій.

// 2. Після конвертування вираз стає: 4 - 3

// 3. JavaScript здійснює операцію віднімання:
//    - Результат віднімання: 1

// Таким чином, вираз '4' - 3 перетворюється в число 1.




'6' + 3 ** 0;
Результат: '61';



// 1. JavaScript спочатку оцінює вираз 3 ** 0, де ** є оператором піднесення до степеня.

// 2. Обчислення виразу 3 ** 0:
//    - 3 ** 0 дорівнює 1.

// 3. Після обчислення виразу стає: '6' + 1

// 4. JavaScript здійснює операцію конкатенації рядків:
//    - Конкатенує рядок '6' з результатом попередньої операції, тобто з рядком '1'.

// 5. Остаточний результат: '61'

// Таким чином, вираз '6' + 3 ** 0 перетворюється в рядок '61'.




12 / '6';
Результат: 2;



// 1. Конвертування рядка '6' у число:
//    - JavaScript успішно конвертує рядок '6' у число 6 для виконання арифметичних операцій.

// 2. Після конвертування вираз стає: 12 / 6

// 3. JavaScript здійснює операцію ділення:
//    - Виконується ділення числа 12 на число 6.
//    - Результат ділення: 2


// Таким чином, вираз 12 / '6' перетворюється в число 2.




'10' + (5 === 6);
Результат: '10false';



// 1. JavaScript спочатку оцінює вираз в дужках (5 === 6), що є логічним виразом.
//    - Вираз 5 === 6 порівнює число 5 з числом 6.
//    - Оскільки 5 не дорівнює 6, результатом цього виразу буде false.

// 2. Після обчислення виразу в дужках стає: '10' + false

// 3. JavaScript здійснює операцію конкатенації рядків:
//    - Конкатенує рядок '10' з результатом попередньої операції, тобто з рядком 'false'.

// 4. Остаточний результат: '10false'

// Таким чином, вираз '10' + (5 === 6) перетворюється в рядок '10false'.




null == '';
Результат: true;



/ 1. JavaScript спочатку перевіряє типи операндів. У цьому випадку один операнд є null, а інший - пустий рядок.

// 2. Конвертація порівнюваних значень:
//    - null у JavaScript є спеціальним значенням, яке представляє відсутність значення.
//    - Пустий рядок '' є рядком з нульовою довжиною.

// 3. Логіка перевірки:
//    - При порівнянні оператором == JavaScript здійснює перетворення типів (якщо потрібно).
//    - null перетворюється в false.
//    - Порожній рядок '' також перетворюється в false.

// 4. Порівняння значень:
//    - Після конвертації обидва значення є false.
//    - Тому результат порівняння null == '' буде true, оскільки обидва операнди перетворюються в false.

// 5. Остаточний результат: true

// Таким чином, вираз null == '' перетворюється в true.




3 ** (9 / 3);
Результат: 27;



// 1. JavaScript спочатку обчислює вираз у дужках (9 / 3), що є арифметичним виразом.
//    - Вираз 9 / 3 дорівнює 3.

// 2. Після обчислення вираз стає: 3 ** 3

// 3. JavaScript здійснює піднесення до степеня:
//    - Виконується піднесення числа 3 до степеня 3.
//    - Результат піднесення до степеня: 27

// Таким чином, вираз 3 ** (9 / 3) перетворюється в число 27.





!!'false' == !!'true';
Результат: true;



// 1. JavaScript спочатку оцінює кожний операнд за допомогою подвійного оператора логічного заперечення (!!).

// 2. Обчислення для 'false':
//    - Оператор !! перетворює рядок 'false' в логічне значення.
//    - Любий непорожній рядок, включаючи 'false', вважається true.
//    - Після подвійного заперечення (!!):
//      !!'false' = !!true = true

// 3. Обчислення для 'true':
//    - Оператор !! перетворює рядок 'true' в логічне значення.
//    - Любий непорожній рядок, включаючи 'true', вважається true.
//    - Після подвійного заперечення (!!):
//      !!'true' = !!true = true

// 4. Після обчислення обидва операнди мають значення true.

// 5. Ось чому: true == true
//    - Оператор == порівнює обидва операнди, і вони обидва мають однакові значення true.


// Таким чином, вираз !!'false' == !!'true' перетворюється в true.





0 || '0' && 1;
Результат: 1;



// Обчислюємо логічні вирази окремо:

// Перша частина: 0 || '0'
// Оператор || (логічне АБО) обчислюється зліва направо.
// 0 перетворюється в false, '0' перетворюється в true (не пустий рядок).
// Результатом буде '0', оскільки логічне АБО поверне перше істинне значення.
// Результат: '0'

// Друга частина: '0' && 1
// Оператор && (логічне І) має вищий пріоритет.
// '0' перетворюється в true (не пустий рядок), 1 також є true.
// Результатом буде 1, оскільки обидва операнди true.
// Результат: 1

// Тепер об'єднуємо результати:

// Повторно обчислюємо вираз: 0 || '0' && 1
// Спочатку обчислюємо '0' && 1, що дає 1.
// Потім обчислюємо 0 || 1, що також дає 1 (оскільки логічне АБО повертає перше істинне значення).
// Остаточний результат: 1




(+null == false) < 1;
Результат: false;



// Розглянемо перший вираз (+null == false):

// 1. (+null) перетворює null в число, тому (+null) стає 0.
//    Тут ми використовуємо унарний оператор + для перетворення null в число.

// 2. Далі порівнюємо це з false: 0 == false.
//    Порівняння в JavaScript між числом 0 і логічним false дає true,
//    оскільки при порівнянні з логічними значеннями JavaScript конвертує їх в числа.

// Таким чином, результатом першої частини (+null == false) є true.

// Тепер переходимо до другої частини виразу: true < 1.

// 1. true конвертується в число при порівнянні, тому true стає 1.

// 2. Тепер ми порівнюємо 1 < 1.

// Оскільки це порівняння не є істинним (1 не менше за 1), результатом виразу (+null == false) < 1 буде false.





false && true || true
Результат: true;



// 1. Спочатку обчислюємо вираз між `&&`:

//  результат виразу false && true є false.
//    (Логічне І повертає перше ложне значення, якщо таке є; в іншому випадку, останнє істинне значення).

// 2. Далі обчислюємо вираз між `||`:

//    false || true:
//    Результат попереднього кроку є false, а true перетворюється в true.
//    (Логічне АБО повертає перше істинне значення, якщо таке є; в іншому випадку, останнє значення).

// Отже, результатом виразу false && true || true є true.





false && (false || true);
Результат: false;


// 1. Обчислюємо вираз у дужках (false || true):
//    - Оператор || (логічне або) повертає true, якщо хоча б один з операндів true.
//    - false || true => true


// 2. Тепер обчислюємо вираз false && true:
//    - Оператор && (логічне і) повертає true, тільки якщо обидва операнди true.
//    - Оскільки один з операндів (перший) false, результатом буде false.





(+null == false) < 1 ** 5;
Результат: false;



/// 1. Обчислюємо вираз у перших дужках:
//    - Оператор + перетворює null на числове значення.
//    - +null стає 0 (null у JavaScript після конвертації до числа стає 0).

// 2. Обчислюємо вираз 0 == false:
//    - Порівнюємо число 0 з булевим значенням false.
//    - У JavaScript 0 дорівнює false у контексті порівнянь.
 Оскільки 0 дорівнює false вираз 0 == false повертає true;

// 3. Тепер обчислюємо вираз у других дужках 1 ** 5:
//    - Оператор ** підносить 1 до степеня 5. 
1 ** 5 = 1; 

// 4. Перевіряємо порівняння true < 1:
//    - true в JavaScript під час порівняння перетворюється в 1.
//    - Порівняння 1 < 1 є неправдою (false).

